{"version":3,"sources":["routes/history.ts","components/RoomsDashboard/CreateRoom/model.ts","components/RoomsDashboard/model.ts","components/RoomsDashboard/Join/model.ts","components/RoomsDashboard/CreateRoom/index.tsx","components/RoomsDashboard/Join/index.tsx","components/RoomsDashboard/RoomsList/model.ts","components/RoomsDashboard/RoomsList/index.tsx","components/RoomsDashboard/index.tsx","components/Room/model.ts","components/Room/Editor/index.tsx","components/Room/index.tsx","routes/index.tsx","index.tsx","App.tsx","components/RoomsDashboard/RoomsList/styles.module.css"],"names":["$input","changedInput","resetedInput","on","state","event","currentTarget","value","reset","submited","watch","fxCreateRoom","handler","async","roomName","a","post","data","$store","doneData","store","room","id","name","link","fullLink","$user","userUpdated","$joined","submitedJoin","resetedJoin","source","clock","target","prepend","filter","length","CreateRoom","input","joined","type","onChange","onClick","Join","user","$expandedRoom","changedExpandedRoom","resetedExpandedRoom","_","index","RoomsList","history","rooms","expanded","key","className","handlePushHistory","path","push","to","RoomsDashboard","io","$roomId","changedRoomId","roomId","$roomData","users","roomJoined","roomDataChanged","roomDataChangedResponse","incomingRoom","joinRoom","payload","emit","username","changeText","Editor","roomData","Room","params","useEffect","Routes","exact","component","rootElement","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.109549fa.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","import { createEvent, createStore } from 'effector';\n\nexport const $input = createStore<string>('');\nexport const changedInput = createEvent<React.ChangeEvent<HTMLInputElement>>();\nexport const resetedInput = createEvent();\n$input.on(changedInput, (state, event) => event.currentTarget.value);\n$input.reset(resetedInput);\n\nexport const submited = createEvent<void>();\nsubmited.watch(resetedInput);\n","import { createEvent, createStore, createEffect } from 'effector';\nimport axios from 'axios';\n\nexport interface Room {\n    name: string;\n    id: string;\n    link: string;\n    fullLink: string;\n}\n\nexport type RoomsState = Room[];\n\nexport interface UserData {\n    name: string;\n}\n\nconst initialState: RoomsState = [];\n\nexport interface CreateRoomResponse {\n    room: {\n        id: string;\n        name: string;\n    };\n}\n\nexport const fxCreateRoom = createEffect({\n    handler: async (roomName: string) => {\n        const response = await axios.post('http://localhost:4000/room', {\n            roomName,\n        });\n\n        return response.data as CreateRoomResponse;\n    },\n});\n\nexport const $store = createStore(initialState);\n$store.on(fxCreateRoom.doneData, (store, { room }) => [\n    ...store,\n    {\n        id: room.id,\n        name: room.name,\n        link: `/room/${room.id}`,\n        fullLink: `http://localhost:3000/room/${room.id}`,\n    }],\n);\n\nconst userInitialState: UserData = {\n    name: '',\n};\n\nexport const $user = createStore(userInitialState);\nexport const userUpdated = createEvent<Partial<UserData>>();\n$user.on(userUpdated, (store, data) => ({\n    ...store,\n    ...data,\n}));\n\nexport const roomCreated = createEvent<React.FormEvent>();\n","import { createEvent, createStore, sample, guard } from 'effector';\n\nimport { userUpdated, fxCreateRoom } from '../model';\nimport { $input as $roomname, submited as roomCreated } from '../CreateRoom/model';\n\nexport const $input = createStore<string>('');\nexport const changedInput = createEvent<React.ChangeEvent<HTMLInputElement>>();\nexport const resetedInput = createEvent();\n$input.on(changedInput, (state, event) => event.currentTarget.value);\n$input.reset(resetedInput);\n\nexport const $joined = createStore<boolean>(false);\nexport const submitedJoin = createEvent();\nexport const resetedJoin = createEvent();\n$joined.on(submitedJoin, () => true);\n$joined.reset(resetedJoin);\n\nexport const submited = createEvent<void>();\nsubmited.watch(resetedInput);\n\nguard({\n    source: sample({\n        source: $input,\n        clock: submited,\n        target: userUpdated.prepend((value: string) => ({\n            name: value,\n        })),\n    }),\n    filter: (value: string) => value.length !== 0,\n    target: submitedJoin,\n});\n\nguard({\n    source: sample($roomname, roomCreated),\n    filter: $joined,\n    target: fxCreateRoom,\n});\n","import React from 'react';\nimport { useStore } from 'effector-react';\n\nimport {\n    $input,\n    changedInput,\n    submited,\n} from './model';\nimport {\n    $joined,\n} from '../Join/model';\n\nconst CreateRoom = () => {\n    const input = useStore($input);\n    const joined = useStore($joined);\n\n    return (\n        <div>\n            {joined ? (\n                <>\n                    <input type='text' value={input} onChange={changedInput} />\n                    <button onClick={() => submited()}>Create room</button>\n                </>\n            ) : (\n                <p>To create room you must be joined!</p>\n            )}\n        </div>\n    );\n};\n\nexport { CreateRoom };\n","import React from 'react';\nimport { useStore } from 'effector-react';\n\nimport {\n    $input,\n    $joined,\n    changedInput,\n    submited,\n} from './model';\nimport { $user } from '../model';\n\nconst Join = () => {\n    const user = useStore($user);\n    const input = useStore($input);\n    const joined = useStore($joined);\n\n    return (\n        <div>\n            {joined && <p>You are joined as {user.name}</p>}\n            {!joined && (\n                <>\n                    <input type='text' value={input} onChange={changedInput} />\n                    <button onClick={() => submited()}>Join as</button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport { Join };\n","import { createEvent, createStore } from 'effector';\n\nconst $expandedRoom = createStore<number>(-1);\nconst changedExpandedRoom = createEvent<number>();\nconst resetedExpandedRoom = createEvent();\n$expandedRoom.on(changedExpandedRoom, (_, index) => index);\n$expandedRoom.reset(resetedExpandedRoom);\n\nexport { $expandedRoom, changedExpandedRoom, resetedExpandedRoom };\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useList, useStore } from 'effector-react';\n\nimport { $store } from '../model';\nimport { $expandedRoom, changedExpandedRoom } from './model';\nimport styles from './styles.module.css';\n\nconst RoomsList = () => {\n    const history = useHistory();\n\n    const handlePushHistory = (path: string) => {\n        history.push(path);\n    };\n\n    const rooms = useList($store, (room, index) => {\n        const expandedRoomIndex = useStore($expandedRoom);\n        const expanded = expandedRoomIndex === index;\n\n        const handleOnClick = () => changedExpandedRoom(index);\n\n        return (\n            <li key={index} className={styles.room}>\n                <p\n                    onClick={() => handlePushHistory(room.link)}\n                >\n                    {room.name}\n                </p>\n                <button onClick={handleOnClick}>Show more</button>\n                {expanded && <p>Link: <Link to={room.link}>{room.fullLink}</Link></p>}\n            </li>\n        );\n    });\n\n    return (\n        <ul>\n            {rooms}\n        </ul>\n    );\n};\n\nexport { RoomsList };\n","import React from 'react';\n\nimport { CreateRoom } from './CreateRoom';\nimport { Join } from './Join';\nimport { RoomsList } from './RoomsList';\n\nconst RoomsDashboard = () => {\n    return (\n        <div>\n            <Join />\n            <RoomsList />\n            <CreateRoom />\n        </div>\n    );\n};\n\nexport { RoomsDashboard };\n","import { createEvent, createStore, guard, combine, sample, forward, Store } from 'effector';\nimport socket from 'socket.io-client';\n\nimport { Room, $user } from 'components/RoomsDashboard/model';\n\nconst io = socket('http://localhost:4000/rooms');\n\ntype EditorRoom<T = any> =\n    & Pick<Room, 'id' | 'name'>\n    & {\n        users: string[];\n        data?: T;\n    };\n\ntype RoomDataState<T> = EditorRoom<T>;\n\ninterface JoinRoomPayload {\n    roomId: string;\n    username: string;\n}\n\ninterface ChangeTextPaylaod {\n    roomId: string;\n    value: string;\n}\n\nexport const emitJoinRoom = (payload: JoinRoomPayload) => {\n    io.emit('join-room', payload);\n};\n\nexport const emitChangeText = (payload: ChangeTextPaylaod) => {\n    io.emit('text-change', payload);\n};\n\nconst initialRoomData: RoomDataState<string> = {\n    id: '',\n    name: '',\n    users: [],\n};\n\nexport const $roomId = createStore<string>('');\nexport const changedRoomId = createEvent<string>();\n$roomId.on(changedRoomId, (_, roomId) => roomId);\n\nexport const $roomData = createStore<RoomDataState<string>>(initialRoomData);\nexport const roomJoined = createEvent<EditorRoom>();\nexport const roomDataChanged = createEvent<React.ChangeEvent<HTMLTextAreaElement>>();\nexport const roomDataChangedResponse = createEvent<string>();\n$roomData.on(roomJoined, (store, incomingRoom) => ({\n    ...store,\n    ...incomingRoom,\n}));\n$roomData.on(roomDataChanged, (store, event) => ({\n    ...store,\n    data: event.currentTarget.value,\n}));\n$roomData.on(roomDataChangedResponse, (store, value) => ({\n    ...store,\n    data: value,\n}));\n\nconst joinRoom = createEvent<JoinRoomPayload>();\njoinRoom.watch(emitJoinRoom);\n\nio.on('join-room-response', roomJoined);\n\nguard<JoinRoomPayload>({\n    source: combine($user, $roomId, (user, roomId) => ({\n        roomId,\n        username: user.name,\n    })),\n    filter: (data) => data.username.length > 0 && data.roomId.length > 0,\n    target: joinRoom,\n});\n\nexport const changeText = createEvent<ChangeTextPaylaod>();\nchangeText.watch(emitChangeText);\n\nio.on('text-change-response', roomDataChangedResponse);\n\nsample(\n    $roomId,\n    roomDataChanged,\n    (roomId, event) => changeText({\n        roomId,\n        value: event.currentTarget.value,\n    }),\n);\n","import React from 'react';\nimport { useStore } from 'effector-react';\n\nimport { roomDataChanged, $roomData } from '../model';\n\nconst Editor = () => {\n    const roomData = useStore($roomData);\n\n    return (\n        <textarea\n            value={roomData.data || ''}\n            onChange={roomDataChanged}\n        />\n    );\n};\n\nexport { Editor };\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from 'effector-react';\n\nimport { $joined } from '../RoomsDashboard/Join/model';\nimport { Join } from '../RoomsDashboard/Join';\nimport { Editor } from './Editor';\nimport { changedRoomId } from './model';\n\nconst Room = () => {\n    const params = useParams();\n    const joined = useStore($joined);\n\n    React.useEffect(() => {\n        changedRoomId((params as any).id);\n    }, [params]);\n\n    return (\n        <div>\n            <Join />\n            {joined && <Editor />}\n        </div>\n    );\n};\n\nexport { Room };\n","import React from 'react';\nimport { Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport { history } from './history';\nimport { RoomsDashboard } from 'components/RoomsDashboard';\nimport { Room } from 'components/Room';\n\nconst Routes = () => (\n    <Router history={history}>\n        <Switch>\n            <Route path='/' exact>\n                <Redirect to='/dashboard'/>\n            </Route>\n            <Route path='/dashboard' component={RoomsDashboard} exact />\n            <Route path='/room/:id' component={Room} exact />\n        </Switch>\n    </Router>\n);\n\nexport { Routes };\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './App';\nimport './styles/index.css';\n\nconst rootElement = document.getElementById('root');\n\nrender(\n    <App />,\n    rootElement,\n);\n","import React from 'react';\n\nimport { Routes } from './routes';\n\nexport const App = () => {\n    return (\n        <Routes />\n    );\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"room\":\"styles_room__tJa_9\"};"],"sourceRoot":""}